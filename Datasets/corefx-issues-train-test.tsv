ID	Area	Title	Description
27000	area-System.Net	" The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"")"	"I'm having an issue when calling an endpoint with the following code, and I don't know what can solve that critical issue on mac:    ```  var handler = new HttpClientHandler();  handler.ClientCertificates.Add(cert);  var client = new HttpClient(handler);  var result = await client.GetAsync(url);  ```    The error is below:    ```  System.PlatformNotSupportedException: The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"").     at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(EasyRequest easy, ClientCertificateOption clientCertOption)     at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl()     at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(EasyRequest easy)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  ```    **curl --version**  ```  curl 7.54.0 (x86_64-apple-darwin17.0) libcurl/7.54.0 LibreSSL/2.0.20 zlib/1.2.11 nghttp2/1.24.0  Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp  Features: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz HTTP2 UnixSockets HTTPS-proxy  ```    **dotnet info**  ```  .NET Command Line Tools (2.1.4)    Product Information:   Version:            2.1.4   Commit SHA-1 hash:  5e8add2190    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.1.4/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.5    Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54  ```"
26999	area-System.Collections	Queue/Stack batch item Enqueue/Push	"`Queue` and `Stack` in the `System.Collections.Generic` namespace currently only implement methods to enqueue/push single objects to the collection. In order to add multible elements, the source collection has to be enumerated, that could potentialy lead to a performance loss based on the required iterations.      # Usage  Because of performance, large input collections would profit from such a change.  ````cs      private static async void UseCaseLogic()      {          var workQueue = new Queue<char>();          var siteList = new List<string>          {              ""https://google.com"",              ""https://github.com"",          };                using (var wc = new WebClient())          {              foreach (var cSite in siteList)              {                  var cSiteText = await wc.DownloadStringTaskAsync(cSite);                  workQueue.EnqueueRange(cSiteText.ToCharArray());              }          }                while (workQueue.Count != 0)          {              var cItem = workQueue.Dequeue();              //Process          }      }  ````    # Proposed API additions    Because of a simmilar method in `List<T>` (`AddRange`) naming the new APIs `EnqueueRange`/`PushRange` appears to be the most logical way.    ````cs  namespace System.Collections.Generic  {      public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void EnqueueRange(IEnumerable<T> item);          public void EnqueueRange(T[] item);      }  }  ````    ````cs  namespace System.Collections.Generic  {      public class Queue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void PushRange(IEnumerable<T> item);          public void PushRange(T[] item);      }  }  ````    # Open Questions  In which order should the source array/collection be Inserted? Would reordering the source void the performance gains?"
26997	area-System.Net	Trying to collect info about ping test failures in macOS 10.12	See #26358
26996	area-System.IO	System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'	I'm having the following error when targetting netappcore2.0 and net471:    System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'.    Is this a new bug? Is there any workaround available?    Thanks.
26995	area-System.Net	Add DecompressionMethods.Brotli?	"System.Net.DecompressionMethods is an enum that is used by HttpClient handlers to determine whether/what to automatically decode in a response, e.g. if DecompressionMethods.Deflate is set and the response is encoded with deflate, it'll automatically decode the response as part of handing it back.    The enum today is just:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          None = 0,          GZip = 1,          Deflate = 2      }  }  ```  but we now also have BrotliStream, which we could use to support a DecompressionMethods.Brotli and a ""br"" encoding:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          ...          Brotli = 4      }  }  ```  From an implementation perspective, this would mean either System.Net.Http.dll taking a dependency on System.IO.Compression.Brotli.dll, or if we wanted to avoid the dependency, building all of the source into System.Net.Http.dll (there is currently a native dependency, with the native portion compiled into clrcompression.dll on Windows and System.IO.Compression.Native.so/dylib on Unix)."
26994	area-System.Reflection	Add new overload to System.Reflection.Assembly to load from Stream	## Rationale    Currently we can load an assembly from byte array or by file name:  ```c#          public static Assembly Load(byte[] rawAssembly);          public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore);          public static Assembly Load(AssemblyName assemblyRef);          public static Assembly Load(string assemblyString);          public static Assembly LoadFile(string path);          public static Assembly LoadFrom(string assemblyFile, byte[] hashValue, Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);          public static Assembly LoadFrom(string assemblyFile);  ```    If we compile dynamically in a memory stream we have to do extra allocations to load the assembly:  ```c#  using (var ms = new MemoryStream())  {      emitResult = compilation.Emit(peStream: ms, options: _emitOptions);      if (emitResult.Success)      {          ms.Flush();          ms.Seek(0, SeekOrigin.Begin);          Assembly assembly = Assembly.Load(ms.ToArray());      }  }  ```    ### Proposed API    ```c#      // Load the assembly from Stream.          public static Assembly Load(Stream assemblyStream);  ```    ### Update    There is `AssemblyLoadContext.Default.LoadFromStream()` in `System.Reflection.Loader` but its hard to find.
26993	area-Infrastructure	Clear initlocals in a bunch of assemblies	Sets  ```XML  <ILLinkClearInitLocals>true</ILLinkClearInitLocals>  ```  for the assemblies:  - System.IO.FileSystem  - System.IO.Pipes  - System.Memory  - System.Net.Http  - System.Net.Http.WinHttpHandler  - System.Net.NameResolution  - System.Net.NetworkInformation  - System.Net.Primitives  - System.Net.Requests  - System.Net.Security  - System.Net.Sockets  - System.Net.WebSockets  - System.Net.WebSockets.Client  - System.Net.WebSockets.WebSocketsProtocol  - System.Private.Uri  - System.Runtime  - System.Runtime.Extensions    Eventually we'd ideally set the flag (or eventually compiler switch) for the whole repo; these are just the ones I audited thus far.  In a few cases I had to make code changes to adapt, where the code was expecting stackallocs to be cleared.  I also looked at a few other projects (System.Collections, System.Runtime.Numerics) where there were more significant dependencies on clearing and I decided to leave those for later.    Contributes to https://github.com/dotnet/corefx/issues/26939  cc: @jkotas, @erozenfeld, @VSadov 
26991	area-System.Net	HttpClient not setting Accept-Encoding: gzip, deflate on older Windows versions	".NET Core 2.1.4 SDK    ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```    On a Windows 2008 R2 box, it looks like `Accept-Encoding` is **not** set even though the `HttpClientHandler` has compression set.    Windows 2008 R2  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Host] => scooterlabs.com  )  ```    Windows 10  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Accept-Encoding] => gzip, deflate      [Host] => scooterlabs.com  )    ```  This works as expected on a Windows 10 box and Windows 8.1 VM.    If you force the headers to be sent however, on Windows 2008 R2 it decompresses fine, so compression is supported.    If you use WebClient or HttpWebRequest directly with `AutomaticDecompression` set it works on all versions with the correct headers and ability to handle the compressed payload.    This works on all environments  ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""gzip""));        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""deflate""));        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```      P/s: SO question is here https://stackoverflow.com/questions/48703143/httpclient-not-sending-accept-encoding-on-different-machine    "
26990	area-System.Security	Crypto provider wrappers in System.Security.Cryptography.Algorithms	PR #12964 added crypto wrappers.    I'm able to use them targeting netstandard 2.x but not for netstandard1.x.    I see that those providers are not included as part of `System.Security.Cryptography.Algorithms` package (v4.3.1). Would it be possible to include them as part of the nuget package?
26989	area-System.Net	SocketsHttpHandler: Fix some issues with cookie handling, and add cookie tests	Remove CookieHandler and integrate the cookie handling logic into HttpConnection, which fixes some issues with how cookies were handled.    Add a bunch of protocol tests for cookie handling.  Issues filed for failures in CurlHandler and WinHttpHandler.    Fixes #26984   Fixes #26985   
26988	area-System.IO	[Regression] Test failure: System.IO.Tests.* / DeleteRoot	Affected OS:  * All Linux & Mac OS    Affected tests:  * System.IO.Tests.DirectoryInfo_Delete / DeleteRoot  * System.IO.Tests.DirectoryInfo_Delete_bool / DeleteRoot  * System.IO.Tests.Directory_Delete_str / DeleteRoot  * System.IO.Tests.Directory_Delete_str_bool / DeleteRoot    Failure:  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.IO.DirectoryNotFoundException): Could not find a part of the path '/'.    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/9 | 20180209.01 | 56x (14 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.03 | 48x (12 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.03/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.05 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.05/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.01 | 60x (15 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.03 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.IO.FileSystem.Tests)
26986	area-System.Net	WinHttpHandler: cookies received on a 401 response are not added to the CookieContainer	If the server sends a 401 auth challenge with a Set-Cookie header, the cookie is not added to the CookieContainer.    SocketsHttpHandler and CurlHandler handle this correctly.
26985	area-System.Net	SocketsHttpHandler: incorrect cookie behavior with redirects	When processing a redirect, the redirected request will be sent with cookies for both the initial request and the redirected request.  Should be only the latter.
26984	area-System.Net	SocketsHttpHandler: container cookies are incorrectly handled if you add a Cookie header to the cookie collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to be appended using the "","" separator, which is incorrect for cookies -- they use "";"" as a separator instead.    WinHttpHandler appends the cookies properly."
26983	area-System.Net	CurlHandler: container cookies are not sent if you add a Cookie header to the header collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to not be sent.    WinHttpHandler appends the cookies from the cookie container to the specified Cookie: header."
26982	area-System.Net	Disable Http status line parsing test cases on CurlHandler	Closes: #26980
26981	area-Infrastructure	Add Ubuntu 18 to supported Linux list	
26980	area-System.Net	[New test] Test failure: System.Net.Http.Functional.Tests.HttpProtocolTests / GetAsync_InvalidStatusLine_ThrowsException	"[8 test cases](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.Net.Http.Functional.Tests) fail on Fedora27 and Ubuntu17.10 (probably due to different libcurl version which changed the behavior) - introduced in #26798  * ""HTTP/1.1 ""  * ""HTTP/1.1 !11""  * ""HTTP/1.1 "" (looks same as the first one - unclear why)  * ""HTTP/1.1 a11""  * ""HTTP/1.1 abc""  * ""HTTP/1.1\\t""  * ""HTTP/1.1\\t\\t""  * ""HTTP/1.A 200 OK""    I would recommend to skip the test cases on CurlHandler in general."
26979	area-System.Net	Add test infra for auth testing.	fixes #26375    @dotnet/ncl 
26978	area-System.IO	Make Unix filename conversion lazy	Also hook error handling. I'm working on shifting to IntPtr instead of SafeHandle like the Windows impl.    cc: @danmosemsft, @pjanotti, @tarekgh 
26976	area-System.Reflection	Add support for PDB Checksum debug directory entry	Implements proposal https://github.com/dotnet/corefx/issues/26935    The CodeView debug directory entry in PE/COFF file associates the PE file with one or more PDBs. The CodeView entry and the PDB both store the same PDB ID (for Portable PDB it's 20B for Windows PDB it's 16B of data). Debuggers, symbol servers and other tools use the PDB ID to match the PE file with the PDB.     Although the PDB ID is good enough for finding the right PDB for the PE file it is not good enough for validating that the PDB has not been maliciously modified. _PDB Checksum_ is a new debug directory record that can be used for such validation.    _PDB Checksum_ comprises of crypto hash algorithm name and the hash of the PDB content. See   [Specification](https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PE-COFF.md#pdb-checksum-debug-directory-entry-type-19) for details.    This change introduces new APIs that allow tools to read and write PDB Checksum.   
26975	area-System.Net	CookieCollection should implement ICollection<Cookie>	It implements `ICollection`, but not `ICollection<Cookie>`.
26971	area-Infrastructure	Adding a new resource string to .resx file doesn't regenerate generated SR.cs 	"Repro:    1. Open `corefx\src\System.Reflection.Metadata\System.Reflection.Metadata.sln` in VS.  2. Open `corefx\src\System.Reflection.Metadata\src\Resources\Strings.resx`  3. Add a new resource string and save the .resx file, e.g.    ```xml    <data name=""Foo"" xml:space=""preserve"">      <value>Foo</value>    </data>  ```    4. Open any .cs file and type `SR.Foo`. `Foo` is not in completion.  5. Build. Build fails due to missing `SR.Foo` property.    **Expected behavior**    `SR.Foo` is generated as soon as the .resx file is saved."
26970	area-System.Runtime	Fixing a regression introduced by the previous test fix.	My previous fix introduced a regression which was not caught in normal desktop test runs.
26967	area-System.Net	"HttpClient PostAsync throws exception ""The server returned an invalid or unrecognized response"" when using linux container"	"When I ran following code in Windows or Visual Studio, it worked fine.     ```c#  var httpClientHander = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip };    using (var client = new HttpClient(httpClientHander))  {      client.DefaultRequestHeaders.Add(""Authorization"", $""Basic {_authorizationHeaderValue}"");      var soapMessage = CreateSoapRequestForGetDocument();      using (var response = await client.PostAsync(_options.Value.BaseUri, new StringContent(soapMessage, Encoding.UTF8, ""text/xml"")))      {          documentResponse = await response.Content.ReadAsStringAsync();      }  }  ```    However, when I ran it with docker using Linux container, I got this error:    ```  System.Net.Http.HttpRequestException: The server returned an invalid or unrecognized response.  at System.Net.Http.CurlResponseHeaderReader.ReadHeader(String& headerName, String& headerValue)  at System.Net.Http.CurlHandler.MultiAgent.CurlReceiveHeadersCallback(IntPtr buffer, UInt64 size, UInt64 nitems, IntPtr context)  --- End of stack trace from previous location where exception was thrown ---  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```    I inspected the response via Fiddler and the raw response is like this:    ```  > HTTP/1.1 200 OK  Date: Wed, 07 Feb 2018 21:02:57 GMT  Server: Web Server  Vary: Accept-Encoding  X-Robots-Tag: noindex  Keep-Alive: timeout=5, max=100  Connection: Keep-Alive  Content-Type: multipart/related; type=""application/xop+xml""; start=""<soap.xml@xfire.codehaus.org>""; start-info=""text/xml"";  boundary=""----=_Part_166_1126302715.1518037377448""  Content-Length: 2488  ------=_Part_166_1126302715.1518037377448  Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml""  Content-Transfer-Encoding: 8bit  Content-ID: <soap.xml@xfire.codehaus.org>  <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><soap:Body><ns1:getDocumentResponse xmlns:ns1=""http://www.test.com/ws/integration""><ns1:Document xmlns:ns2=""http://www.w3.org/2004/11/xmlmime"" ns2:contentType=""text/xml; charset=UTF-8""><Include xmlns=""http://www.w3.org/2004/08/xop/include"" href=""cid:1518037377448449414076338@http://www.w3.org/2001/XMLSchema""/></ns1:Document></ns1:getDocumentResponse></soap:Body></soap:Envelope>  ------=_Part_166_1126302715.1518037377448  Content-Type: text/xml; charset=UTF-8  Content-Transfer-Encoding: binary  Content-ID: <1518037377448449414076338@http://www.w3.org/2001/XMLSchema>  <Document xmlns=""http://www.test.com/ws/integration"">  </Document>  ------=_Part_166_1126302715.1518037377448--  ```    I have tried to use HttpWebRequest, WebClient or RestSharp and I got the same error message from all of them.     ## Steps to reproduce  Call post async method with HttpClient in docker Linux container    ## Expected behavior  Get the SOAP response (Works fine on Windows).    ## Actual behavior  An exception was thrown    ## Environment data  Product Information: Windows 10  Version: .NET Core 2.0 / .NET Standard 2.0  Docker: Community Edition Version 17.12.0-ce-win47 (15139)    [EDIT] Format code sample and logs/stacks, add syntax highlighting by @karelz"
26966	area-System.Console	System.Console fails with ncurses 6.1	Released on Jan 27, 2018 - Announcement https://www.gnu.org/software/ncurses/    Original report: https://bugs.archlinux.org/task/57260    ```  MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.  System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 526    Unhandled Exception: System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 748  at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 215  ```
26965	area-System.Data	Crash in SqlConnection.Close() when using TransactionScope on linux.	"I'm using SqlClient 4.5.0-preview1-26207-04 in netcoreapp2.0.    ```  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     centos   OS Version:  7   OS Platform: Linux   RID:         centos.7-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    The following snippet would crash on the above machine (removed some code for brevity). Works without issues on Windows.    ```c#  using (var txscope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                  using (var cn = _dBProvider.GetWriteConnection())                  {                      await cn.OpenAsync();                        if (cmd.RecordCertificationStatus)                      {                          await cn.ExecuteAsync(@""INSERT INTO (...) (@iduser, @idtitle, @value, getdate()); "",                               new { @iduser = cmd.SubId, @idtitle=cmd.EntityId, @value = cmd.Model.IsCertified });                      }                      await cn.ExecuteAsync(sql, data);                      txscope.Complete();                  }  ```      Both statements are inserts. Stacktrace is below:    ```   ""System.NullReferenceException: Object reference not set to an instance of an object.                  at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)                  at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)                  at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)                  at System.Data.SqlClient.SqlConnection.Close()                  at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing)                  at System.ComponentModel.Component.Dispose()                  at ...TitleUpdate.Handler.<HandleCore>d__2.MoveNext() in ...TitleUpdate.cs:line 189                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at MediatR.Internal.RequestHandlerWrapperImpl`1.<>c__DisplayClass0_0.<<Handle>g__Handler0>d.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()                  at ...ValidationBehavior`2.<Handle>d__2.MoveNext() in ...ValidationBehavior.cs:line 34                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at ....TitlesController.<Update>d__5.MoveNext() in TitleController.cs:line 98                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextExceptionFilterAsync>d__23.MoveNext()""  ```"
26964	area-System.Net	Expose SocketsHttpHandler	- Renames ManagedHandler to SocketsHttpHandler  - Moves a bunch of files around accordingly  - Updates System.Net.WebSockets.Client to use SocketsHttpHandler directly  - Updates System.Net.Http's tests with a reflection-based rather than TLS-based method for instantiating an HttpClientHandler backed by a SocketsHttpHandler.  - Adds some more tests    cc: @geoffkizer, @davidsh, @Priya91, @wfurt, @karelz   Closes https://github.com/dotnet/corefx/issues/23166  Closes https://github.com/dotnet/corefx/issues/26895  Closes https://github.com/dotnet/corefx/issues/26960
26963	area-Infrastructure	Add TestUtilities NuGet package	To be consumed by CoreRT in connection with the work done in https://github.com/dotnet/corert/pull/5329.     cc @joperezr         
26962	area-System.Net	DO NOT MERGE: test HttpClient cookie handling	
26961	area-System.Security	Support for RFC 3161 cryptographic timestamps with RFC 5816 additions	"This change adds API to inspect, request, and create timestamp tokens in accordance with IETF RFC 3161 (Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP)).  The validation layer includes support for IETF RFC 5816 (ESSCertIDv2 Update for RFC 3161).    Unlike the Win32 CryptRetrieveTimeStamp, this API does not provide ""Time-Stamp Protocol via HTTP"" functionality.  Instead it provides enough of the processing logic to enable a client to do the HTTP(S) request using whatever preferred technology they desire, or to implement any of the other protocols (email, file, sockets, or a custom solution) as their application sees fit.    Rfc3161TimestampRequest.CreateForSignerInfo and Rfc3161TimestampToken.VerifyForSignerInfo provide an accelerated path for IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).    References:  * https://tools.ietf.org/html/rfc3161  * https://tools.ietf.org/html/rfc5816    Fixes #24524."
26960	area-System.Net	WebSocketProtocolTests causing failures in NETFX Outerloop	"NETFX Outerloop test runs have been failing for a few weeks now with the following error:  ```  16:24:49 Build FAILED.  16:24:49   16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning :    System.Net.WebSockets.WebSocketProtocol.Tests  Total: 7, Errors: 0, Failed: 2, Skipped: 0, Time: 1.331s [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning MSB3073: The command ""D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86//RunTests.cmd D:\j\workspace\windows-TGrou---bb3e71cd\bin/testhost/netfx-Windows_NT-Release-x86/"" exited with code 1. [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(500,5): error : One or more tests failed while running tests from 'System.Net.WebSockets.WebSocketProtocol.Tests' please check D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86/testResults.xml for details! [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\dir.traversal.targets(77,5): error : (No message specified) [D:\j\workspace\windows-TGrou---bb3e71cd\src\tests.builds]  ```  There have been ~200 runs that have failed at the same point. As far as I can tell the issue first occurred on January 18th. Based on that date and an offline discussion with the team I think the issue was probably introduced by PR #26429.     You can find a few instances of failed runs here: [1](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/38/console), [2](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/34/console), [3](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/37/console)    cc: @Priya91 "
26959	area-System.Runtime	Re-evaluate default buffer size for getpw native calls	By default, we are allocating 1K of memory on the stack as the first buffer to use in getpwnam_r and getpwuid_r.    https://github.com/dotnet/corefx/blob/bfac45af5dddcbd70b6935fcf92b4b8755f3cd1c/src/Common/src/System/IO/PersistedFiles.Unix.cs#L100    https://github.com/dotnet/corefx/blob/6f5ce856e9f40a7d247c241a6bb916fc546045ff/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L371    https://github.com/dotnet/corefx/blob/426e1c72a0dbda1aece127ec5f56696dc465d74b/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L632    We should re-evaluate if this is too large of a buffer to start with on the stack, as it may be too large for what is necessary.    See https://github.com/dotnet/corefx/pull/26945/files/55c360ff0e62b30814a085f079304a126dab9d21#diff-015aad2514de8320cbfe19ed2b8ee9a7
26957	area-System.Net	Validate ClientWebSocket wss connections work through http proxies	After https://github.com/dotnet/corefx/pull/26878 is merged, validate (and ideally add automated tests) that ClientWebSocket's proxy support works when using wss connections.  And if it doesn't, fix it.
26956	area-System.Numerics	Add Quaternion.Divide(Quaternion, float)	I noticed that Quaternion.Divide Method has no overload to dived a quaternion by a scalar value, unlike the Multiply method! so I suggest to add it!  I used this:  ```  Dim Q1 = New Quaternion(1, -1, 2, -4)  Dim Q2 = New Quaternion(-1, 1, -2, -4) * (1 / Q1.LengthSquared())  ```    Edit:  After looking at the Inverse Methode source code, it appears it is the Reciprocal Method but with a confusing name! Inverse in math can mean addative Inverse  or multiplicative inverse. SIMD-enabled types are not consistant with naming conventions of .net. One odd examole is implementing the Length of these types as a method not a property! I expected to find a Quaternion.Reciprocal as there is a Complex.Reciprocal, but found an Inverse method instead. Having a consistant naming convention makes new features easy to learn and thier methods names easy to remember.  Also I think many of static members need to be instance members.
26954	area-System.Runtime	Proposal: TryForSufficientStack method to support stackalloc usage	"_From @kkokosa on February 8, 2018 12:8_  Due to changes in C# 7.2 and Span, more and more `stackalloc `usages may become popular like:    `Span<byte> span = stackalloc byte[1000];`    However, this call will end up with unrecoverable `StackOverflowException `if there is not enough stack space left. We can do nothing in such situation which makes this approach not useful at some point. It is now just completely unreliable to guess what `stackalloc `size may end up with such a catastrophe.    @jkotas pointed out in #14675 that `RuntimeHelpers.EnsureSufficientExecutionStack` is a reliable solution for handling stack overflow in general but as MSDN says, this method ""_ensures that the remaining stack space is large enough to execute the average .NET Framework function_"". However, probing for _average_ .NET framework function is not very helpful as `stackalloc` makes it not average for sure.     I propose to add a new helper method which gives at least some clue whether our `stackalloc `may end up with `StackOverflowException`:    `public static bool RuntimeHelpers.TryForSufficientStack(long size)`    I believe returning `bool` instead of throwing an exception (like `InsufficientExecutionStackException` from above method) is better because `stackalloc` is most probably used in hot paths already and adding exception handling there is rather undesirable.    As far as I understand this method seems to be quite simple in terms of implementation as all necessary data are there already. My naive implementation proposal:    ```  FCIMPL1(FC_BOOL_RET, ReflectionInvocation::TryForSufficientStack, INT64 size)  {      FCALL_CONTRACT;        Thread *pThread = GetThread();        UINT_PTR current = reinterpret_cast<UINT_PTR>(&pThread);      UINT_PTR limit = reinterpret_cast<UINT_PTR>(pThread->GetCachedStackLimit());        FC_RETURN_BOOL(current >= (limit + size));  }  FCIMPLEND  ```    PS. I am not sure whether stack guard size should be taken into consideration here or not...   _Copied from original issue: dotnet/coreclr#16277_"
26952	area-System.IO	System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'	"I am moving an application from .net to core.  When I run core version I got System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'    I use System.IO.Packaging library to create packages.      ```csharp   Package package = Package.Open(packageFile, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);    AddFile(package, folder, filePath1, mimeType1, id1, reletionType);    AddProperties(package);    AddCoreAndHash(package);      package.Close();  ```    Here is the AddProperties function:    ```csharp  private static void AddProperties(Package package)  {              package.PackageProperties.Subject = ""Subject"";              package.PackageProperties.Creator = ""Creator"";  }  ```  After this I call the AddCoreAndHash function:  ```csharp  private static void AddCoreAndHash(Package package)  {              package.Flush(); // serialize core properties                var coreRelations = package.GetRelationshipsByType(""http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"");              if (coreRelations == null || coreRelations.Count() == 0)              {                  throw new ApplicationException(""Missing core relations."");              }              var corePart = package.GetPart(coreRelations.First().TargetUri);              var stream = corePart.GetStream();              stream.Position = 0;              using (var memoryStream = new MemoryStream())              {                  Tools.CopyStream(stream, memoryStream);                  memoryStream.Position = 0;                  byte[] hash = Tools.CalculateHash(memoryStream);                  //... will add hash to package later              }  }  ```  I get error while accessing the stream of corePart.   I have attached sample files to reproduce the issue    [Files.zip](https://github.com/dotnet/corefx/files/1705985/Files.zip)    "